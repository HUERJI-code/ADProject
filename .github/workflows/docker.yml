name: ci-build-push

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]
  workflow_dispatch:

env:
  DOTNET_VERSION: "8.0.x"
  IMAGE_NAME: huerjidocker/adproject

jobs:
  build-test-pack-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      # —— 还原 & 编译 ——
      - name: dotnet restore
        run: dotnet restore

      - name: dotnet build (Release)
        run: dotnet build --no-restore -c Release

      # —— 运行测试（含你新增的 /health 集成测试）——
      - name: dotnet test (with coverage)
        run: >
          dotnet test --no-build -c Release
          --logger "trx;LogFileName=test_results.trx"
          /p:CollectCoverage=true
          /p:CoverletOutput=./TestResults/coverage/
          /p:CoverletOutputFormat=cobertura

      # —— 上传测试产物，便于在 Actions 里查看 ——
      - name: Upload TRX
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-trx
          path: "**/test_results.trx"

      - name: Upload Coverage (Cobertura)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-cobertura
          path: "**/TestResults/coverage/coverage.cobertura.xml"

      # —— 测试通过后，登录并推镜像 ——
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push (single image with MySQL inside)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
